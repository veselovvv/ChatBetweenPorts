package interfacesapplication;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import jssc.SerialPort;
import jssc.SerialPortException;
import jssc.SerialPortList;

/**
 *
 * @author VeselovVV
 */
public class UserInterface extends javax.swing.JFrame {
    
    int bitsInSecSelected;
    int dataBitsSelected;
    int stopBitsSelected;
    int paritySelected;
    
    SerialPort port1 = null;
    SerialPort port2 = null;
         
    /**
     * Creates new form UserInterface
     */
    public UserInterface() {
        initComponents();
        customInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comPortList = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        dataBits = new javax.swing.JComboBox<>();
        parity = new javax.swing.JComboBox<>();
        stopBits = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        chooseFile = new javax.swing.JButton();
        pathToFile = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        bitsInSec = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textForFile = new javax.swing.JTextArea();
        write = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textInBytes = new javax.swing.JTextArea();
        sendToCOM = new javax.swing.JButton();
        listenToCOM = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        chooseFileTCP = new javax.swing.JButton();
        pathToFileTCP = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textInBytesTCP = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textForFileTCP = new javax.swing.JTextArea();
        writeTCP = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        listen = new javax.swing.JToggleButton();
        send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel8.setText("File path:");

        jLabel4.setText("COM:");

        comPortList.setBackground(new java.awt.Color(255, 255, 255));
        comPortList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not selected" }));

        jLabel5.setText("Data bits:");

        dataBits.setBackground(new java.awt.Color(255, 255, 255));
        dataBits.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4", "5", "6", "7", "8" }));
        dataBits.setSelectedIndex(4);

        parity.setBackground(new java.awt.Color(255, 255, 255));
        parity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paired", "Unpaired", "No", "Marker", "Blank" }));

        stopBits.setBackground(new java.awt.Color(255, 255, 255));
        stopBits.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "1.5", "2" }));

        jLabel6.setText("Pairing:");

        chooseFile.setBackground(new java.awt.Color(255, 255, 153));
        chooseFile.setForeground(new java.awt.Color(0, 0, 0));
        chooseFile.setText("...");
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });

        pathToFile.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Bytes per second:");

        bitsInSec.setBackground(new java.awt.Color(255, 255, 255));
        bitsInSec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "75", "110", "134", "150", "300", "600", "1200", "1800", "2400", "4800", "7200", "9600", "14400", "19200", "38400", "57600", "115200", "128000" }));
        bitsInSec.setSelectedIndex(11);

        jLabel2.setText("File content:");

        jLabel7.setText("Stop bits:");

        textForFile.setBackground(new java.awt.Color(255, 255, 255));
        textForFile.setColumns(20);
        textForFile.setRows(5);
        jScrollPane1.setViewportView(textForFile);

        write.setBackground(new java.awt.Color(255, 255, 153));
        write.setForeground(new java.awt.Color(0, 0, 0));
        write.setText("Write");
        write.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeActionPerformed(evt);
            }
        });

        jLabel3.setText("File content in bytes array:");

        textInBytes.setBackground(new java.awt.Color(255, 255, 255));
        textInBytes.setColumns(20);
        textInBytes.setRows(5);
        jScrollPane2.setViewportView(textInBytes);

        sendToCOM.setBackground(new java.awt.Color(0, 102, 102));
        sendToCOM.setForeground(new java.awt.Color(255, 255, 255));
        sendToCOM.setText("Send");
        sendToCOM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToCOMActionPerformed(evt);
            }
        });

        listenToCOM.setBackground(new java.awt.Color(255, 255, 153));
        listenToCOM.setForeground(new java.awt.Color(0, 0, 0));
        listenToCOM.setText("Listen to COM");
        listenToCOM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listenToCOMActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pathToFile, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 218, Short.MAX_VALUE)
                        .addComponent(write))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 187, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(stopBits, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(parity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bitsInSec, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comPortList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dataBits, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(listenToCOM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendToCOM)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseFile)
                    .addComponent(pathToFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comPortList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bitsInSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(write)
                .addGap(4, 4, 4)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendToCOM)
                    .addComponent(listenToCOM))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("COM", jPanel1);

        chooseFileTCP.setBackground(new java.awt.Color(255, 255, 153));
        chooseFileTCP.setForeground(new java.awt.Color(0, 0, 0));
        chooseFileTCP.setText("...");
        chooseFileTCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileTCPActionPerformed(evt);
            }
        });

        pathToFileTCP.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setText("File path:");

        textInBytesTCP.setBackground(new java.awt.Color(255, 255, 255));
        textInBytesTCP.setColumns(20);
        textInBytesTCP.setRows(5);
        jScrollPane3.setViewportView(textInBytesTCP);

        jLabel10.setText("File content:");

        textForFileTCP.setBackground(new java.awt.Color(255, 255, 255));
        textForFileTCP.setColumns(20);
        textForFileTCP.setRows(5);
        jScrollPane4.setViewportView(textForFileTCP);

        writeTCP.setBackground(new java.awt.Color(255, 255, 153));
        writeTCP.setForeground(new java.awt.Color(0, 0, 0));
        writeTCP.setText("Write");
        writeTCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeTCPActionPerformed(evt);
            }
        });

        jLabel11.setText("File content in bytes array:");

        listen.setBackground(new java.awt.Color(255, 255, 153));
        listen.setForeground(new java.awt.Color(0, 0, 0));
        listen.setText("Listen");
        listen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listenActionPerformed(evt);
            }
        });

        send.setBackground(new java.awt.Color(0, 102, 102));
        send.setForeground(new java.awt.Color(255, 255, 255));
        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(pathToFileTCP, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseFileTCP, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(writeTCP, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(listen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(send)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseFileTCP)
                    .addComponent(pathToFileTCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(writeTCP)
                .addGap(45, 45, 45)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(send)
                    .addComponent(listen))
                .addContainerGap(122, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("TCP Socket", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGap(8, 8, 8))
        );

        pack();
    }

    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {
        // Choose a file using FileChooser:
        useFileChooser(pathToFile, textForFile, textInBytes);
    }

    private void writeActionPerformed(java.awt.event.ActionEvent evt) {
        // Write text to file:
        writeFile(pathToFile, textForFile, textInBytes);
    }

    private void listenToCOMActionPerformed(java.awt.event.ActionEvent evt) {
        // If a COM-port is selected, listen, otherwise - show a dialog window:
        if (!comPortList.getSelectedItem().toString().equals("Not selected")) {   
            if (listenToCOM.isSelected()) {
                // Disable components:
                sendToCOM.setEnabled(false);
                pathToFile.setEnabled(false);
                chooseFile.setEnabled(false);
                comPortList.setEnabled(false);
                bitsInSec.setEnabled(false);
                dataBits.setEnabled(false);
                parity.setEnabled(false);
                stopBits.setEnabled(false);
                write.setEnabled(false);

                port1 = new SerialPort(comPortList.getSelectedItem().toString());

                try {
                    port1.openPort();
                    port1.setParams(bitsInSecSelected, dataBitsSelected, stopBitsSelected, paritySelected);

                    int mask = SerialPort.MASK_RXCHAR;
                    port1.setEventsMask(mask);
                    port1.addEventListener(new ComPortListener(port1));
                } catch (SerialPortException e) {
                    JOptionPane.showMessageDialog(this, "Error! Please try again!"); 
                }
            } else {
                // Enable components:
                sendToCOM.setEnabled(true);
                pathToFile.setEnabled(true);
                chooseFile.setEnabled(true);
                comPortList.setEnabled(true);
                bitsInSec.setEnabled(true);
                dataBits.setEnabled(true);
                parity.setEnabled(true);
                stopBits.setEnabled(true);
                write.setEnabled(true);
                
                // If port1 exists, close it and set it to null:
                if (port1 != null) {
                    try {
                        port1.closePort();
                    } catch (SerialPortException e) {
                        JOptionPane.showMessageDialog(this, "Error! Please try again!"); 
                    }

                    port1 = null;
                }
        
                // If port2 exists, set it to null:
                if (port2 != null) port2 = null;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a COM-port!");
            listenToCOM.setSelected(false);
        }
    }

    private void sendToCOMActionPerformed(java.awt.event.ActionEvent evt) {
        // If there is a file path in the text field, read the file:
        if (!pathToFile.getText().equals("")) {
            chooseFile(pathToFile, textForFile, textInBytes);
        }

        // If a COM-port is selected, send, otherwise - show a dialog window:
        if (!comPortList.getSelectedItem().toString().equals("Not selected")) {
            // If there is no text in the text field, show a dialog window:
            if (!textForFile.getText().equals("")) {
                textInBytes.setText(Arrays.toString(textForFile.getText().getBytes()));

                port2 = new SerialPort(comPortList.getSelectedItem().toString());

                try {
                    port2.openPort();
:
                    bitsInSecSelected = Integer.valueOf(bitsInSec.getSelectedItem().toString());
                    dataBitsSelected = Integer.valueOf(dataBits.getSelectedItem().toString());
                    stopBitsSelected = Integer.valueOf(stopBits.getSelectedItem().toString());

                    switch (parity.getSelectedIndex()) {
                        case 0: paritySelected = SerialPort.PARITY_EVEN;
                        case 1: paritySelected = SerialPort.PARITY_ODD;
                        case 2: paritySelected = SerialPort.PARITY_NONE;
                        case 3: paritySelected = SerialPort.PARITY_MARK;
                        case 4: paritySelected = SerialPort.PARITY_SPACE;
                        default: paritySelected = SerialPort.PARITY_EVEN;
                    }

                    port2.setParams(bitsInSecSelected, dataBitsSelected, stopBitsSelected, paritySelected);

                    port2.writeBytes(textForFile.getText().getBytes());
                    port2.closePort();
                } catch (SerialPortException e) {
                    JOptionPane.showMessageDialog(this, "Error! Please try again!"); 
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select a file or input text!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a COM-port!");
        }
    }

    private void chooseFileTCPActionPerformed(java.awt.event.ActionEvent evt) {
        // Choose a file using FileChooser:
        useFileChooser(pathToFileTCP, textForFileTCP, textInBytesTCP);
    }

    private void writeTCPActionPerformed(java.awt.event.ActionEvent evt) {
        // Write text to file:
        writeFile(pathToFileTCP, textForFileTCP, textInBytesTCP);
    }

    private void listenActionPerformed(java.awt.event.ActionEvent evt) {
        if (listen.isSelected()) {
            // Disable components:
            send.setEnabled(false);
            pathToFileTCP.setEnabled(false);
            chooseFileTCP.setEnabled(false);
            writeTCP.setEnabled(false);
           
            // Start the server in a new thread:
            new Thread(() -> Server.main()).start();
        } else {
            // Enable components:
            send.setEnabled(true);
            pathToFileTCP.setEnabled(true);
            chooseFileTCP.setEnabled(true);
            writeTCP.setEnabled(true);
        }
    }

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {
        // If there is a file path in the text field, read the file:
        if (!pathToFileTCP.getText().equals("")) {
            chooseFile(pathToFileTCP, textForFileTCP, textInBytesTCP);
        }
        
        // If there is no text in the text field, show a dialog window:
        if (!textForFileTCP.getText().equals("")) {
            textInBytesTCP.setText(Arrays.toString(textForFileTCP.getText().getBytes()));

            Client.main(); // start a Client
        } else {
            JOptionPane.showMessageDialog(this, "Select a file or input text!");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JComboBox<String> bitsInSec;
    private javax.swing.JButton chooseFile;
    private javax.swing.JButton chooseFileTCP;
    private javax.swing.JComboBox<String> comPortList;
    private javax.swing.JComboBox<String> dataBits;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToggleButton listen;
    private javax.swing.JToggleButton listenToCOM;
    private javax.swing.JComboBox<String> parity;
    private javax.swing.JTextField pathToFile;
    private javax.swing.JTextField pathToFileTCP;
    private javax.swing.JButton send;
    private javax.swing.JButton sendToCOM;
    private javax.swing.JComboBox<String> stopBits;
    public static javax.swing.JTextArea textForFile;
    public static javax.swing.JTextArea textForFileTCP;
    public static javax.swing.JTextArea textInBytes;
    public static javax.swing.JTextArea textInBytesTCP;
    private javax.swing.JButton write;
    private javax.swing.JButton writeTCP;
    // End of variables declaration

    private void customInitComponents() {
        // Fill ComboBox by COM-ports from device:
        for (String port : SerialPortList.getPortNames()) {
            comPortList.addItem(port);
        }
    }
    
    /**
     * Method for file choosing using FileChooser
     */
    private void useFileChooser(JTextField filePath, JTextArea text, JTextArea bytes) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        // Text files only:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text document", "txt");
        fileChooser.setFileFilter(filter);
        
        int result = fileChooser.showDialog(null, "Open the file");
        
        if (result == JFileChooser.APPROVE_OPTION) {
            // Write file path in the text field:
            filePath.setText(fileChooser.getSelectedFile().getAbsolutePath());
            
            try (FileInputStream fis = new FileInputStream(filePath.getText())) {
                byte[] buffer = new byte[fis.available()];
                fis.read(buffer);
                
                text.setText(new String(buffer));
                bytes.setText(Arrays.toString(buffer));
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        }
    }
    
    /**
     * Method for file choosing using the text field
     */
    private void chooseFile(JTextField filePath, JTextArea text, JTextArea bytes) {
        try (FileInputStream fis = new FileInputStream(filePath.getText())) {
            byte[] buffer = new byte[fis.available()];
            fis.read(buffer);
                
            text.setText(new String(buffer));
            bytes.setText(Arrays.toString(buffer));
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Method for writing text to file
     */
    private void writeFile(JTextField filePath, JTextArea textArea, JTextArea bytes) {
        // If there is no file path in the text field, show a dialog window:
        if (!filePath.getText().equals("")) {
            String text = textArea.getText();
        
            try (FileOutputStream fos = new FileOutputStream(filePath.getText());
                 FileInputStream fis = new FileInputStream(filePath.getText())) {

                byte[] buffer = text.getBytes();
                fos.write(buffer);
                bytes.setText(Arrays.toString(buffer));
                
                System.out.printf("File size: %d bytes \n", fis.available());
                int i = -1;

                while ((i = fis.read()) != -1) {
                    System.out.print((char) i);
                }

                System.out.println("\n");
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a file!");
        }
    }
}
